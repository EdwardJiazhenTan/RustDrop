name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans weekly
    - cron: "0 2 * * 1"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CARGO_TERM_COLOR: always

jobs:
  # Code Quality and Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable, beta]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust-version }}-
            ${{ runner.os }}-cargo-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy (linting)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run unit tests
        run: cargo test --lib --bins --verbose

      - name: Run integration tests
        run: cargo test --test '*' --verbose

      - name: Run doctests
        run: cargo test --doc --verbose

      - name: Run security tests
        run: cargo test --test security_tests --verbose

      - name: Run end-to-end tests
        run: cargo test --test e2e_tests --verbose

      - name: Run stress tests
        run: cargo test --test stress_tests --verbose --release

      - name: Test with release profile
        run: cargo test --release --verbose

  # Enhanced Security and Vulnerability Scanning
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-security-${{ hashFiles('**/Cargo.lock') }}

      - name: Install security tools
        run: |
          cargo install cargo-audit
          cargo install cargo-deny
          cargo install cargo-geiger

      - name: Run security audit
        run: cargo audit

      - name: Run cargo-deny
        run: cargo deny check

      - name: Check for unsafe code
        run: cargo geiger --format json > unsafe-report.json

      - name: Upload unsafe code report
        uses: actions/upload-artifact@v3
        with:
          name: unsafe-code-report
          path: unsafe-report.json

      - name: SAST with Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

  # Mutation Testing
  mutation-testing:
    name: Mutation Testing
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # Skip on PRs to save resources
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-mutants
        run: cargo install cargo-mutants

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-mutation-${{ hashFiles('**/Cargo.lock') }}

      - name: Run mutation tests
        run: |
          # Run mutation testing on critical modules
          cargo mutants --in-place --timeout 300 \
            --test-tool cargo \
            --test-timeout 60 \
            src/core/ src/utils/

      - name: Upload mutation test report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mutation-test-report
          path: mutants.out/

  # Performance and Benchmarking
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # Skip on PRs to save resources
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-perf-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release

      - name: Run benchmarks
        run: cargo bench --bench performance

      - name: Run performance regression tests
        run: |
          # Create test directory
          mkdir -p test_files

          # Generate test files of various sizes
          echo "Small file content" > test_files/small.txt
          dd if=/dev/zero of=test_files/medium.bin bs=1M count=1
          dd if=/dev/zero of=test_files/large.bin bs=1M count=10

          # Generate many small files for stress testing
          for i in {1..1000}; do
            echo "File $i content" > test_files/stress_$i.txt
          done

          # Start server in background
          timeout 120s ./target/release/rustdrop \
            --directory test_files \
            --no-mdns --no-qr --no-browser &
          SERVER_PID=$!

          # Wait for server to start
          sleep 10

          # Performance tests with various load patterns
          echo "=== Single Request Performance ==="
          time curl -f http://localhost:8080/api/health
          time curl -f http://localhost:8080/api/files
          time curl -f http://localhost:8080/api/device

          echo "=== Concurrent Request Performance ==="
          # Test concurrent requests
          for i in {1..20}; do
            curl -s http://localhost:8080/api/health &
            curl -s http://localhost:8080/api/files &
            curl -s http://localhost:8080/api/device &
          done
          wait

          echo "=== Load Testing ==="
          # Install and run basic load testing
          sudo apt-get install -y apache2-utils

          # Test health endpoint under load
          ab -n 1000 -c 10 http://localhost:8080/api/health

          # Test file listing under load
          ab -n 500 -c 5 http://localhost:8080/api/files

          # Cleanup
          kill $SERVER_PID || true
          rm -rf test_files

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: target/criterion/

  # Chaos Testing
  chaos-testing:
    name: Chaos Testing
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y stress-ng iproute2

      - name: Build release binary
        run: cargo build --release

      - name: Chaos test - High CPU load
        run: |
          mkdir -p chaos_test
          echo "test content" > chaos_test/test.txt

          # Start server
          ./target/release/rustdrop \
            --directory chaos_test \
            --no-mdns --no-qr --no-browser &
          SERVER_PID=$!

          sleep 5

          # Apply CPU stress
          stress-ng --cpu 4 --timeout 30s &
          STRESS_PID=$!

          # Test API under stress
          for i in {1..50}; do
            curl -f http://localhost:8080/api/health || echo "Request $i failed"
            sleep 0.1
          done

          kill $STRESS_PID || true
          kill $SERVER_PID || true
          rm -rf chaos_test

      - name: Chaos test - Memory pressure
        run: |
          mkdir -p chaos_test
          echo "test content" > chaos_test/test.txt

          ./target/release/rustdrop \
            --directory chaos_test \
            --no-mdns --no-qr --no-browser &
          SERVER_PID=$!

          sleep 5

          # Apply memory stress
          stress-ng --vm 2 --vm-bytes 80% --timeout 30s &
          STRESS_PID=$!

          # Test under memory pressure
          for i in {1..30}; do
            curl -f http://localhost:8080/api/files || echo "Request $i failed"
            sleep 0.2
          done

          kill $STRESS_PID || true
          kill $SERVER_PID || true
          rm -rf chaos_test

      - name: Chaos test - Network latency
        run: |
          mkdir -p chaos_test
          echo "test content" > chaos_test/test.txt

          ./target/release/rustdrop \
            --directory chaos_test \
            --no-mdns --no-qr --no-browser &
          SERVER_PID=$!

          sleep 5

          # Add network latency
          sudo tc qdisc add dev lo root handle 1: netem delay 100ms

          # Test with network latency
          for i in {1..20}; do
            timeout 5s curl -f http://localhost:8080/api/health || echo "Request $i failed"
          done

          # Remove network restrictions
          sudo tc qdisc del dev lo root || true

          kill $SERVER_PID || true
          rm -rf chaos_test

  # Code Coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-coverage-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Generate coverage report
        run: |
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
          cargo llvm-cov --all-features --workspace --html --output-dir coverage-html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            lcov.info
            coverage-html/

  # Multi-platform Build Testing
  build-test:
    name: Build Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust-version: [stable]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-build-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Build debug
        run: cargo build --verbose

      - name: Build release
        run: cargo build --release --verbose

      - name: Test basic functionality
        run: |
          # Quick smoke test
          cargo run -- --help

  # Docker Build and Security Scan
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: rustdrop:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "rustdrop:test"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run container security tests
        run: |
          # Test container startup and basic functionality
          docker run --name rustdrop-test -d -p 8080:8080 rustdrop:test
          sleep 15

          # Test health endpoint
          curl -f http://localhost:8080/api/health

          # Test container security
          docker exec rustdrop-test whoami | grep -v root || {
            echo "Container should not run as root"
            exit 1
          }

          # Test file permissions
          docker exec rustdrop-test ls -la /app/

          # Test container logs
          docker logs rustdrop-test

          # Test graceful shutdown
          docker stop --time=10 rustdrop-test
          docker rm rustdrop-test

      - name: Run container load test
        run: |
          # Start container for load testing
          docker run --name rustdrop-load -d -p 8080:8080 rustdrop:test
          sleep 10

          # Install load testing tools
          sudo apt-get install -y apache2-utils

          # Run load tests against container
          ab -n 500 -c 10 http://localhost:8080/api/health
          ab -n 200 -c 5 http://localhost:8080/api/device

          docker stop rustdrop-load
          docker rm rustdrop-load

  # Production Docker Build and Push
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Enhanced Deployment Validation
  deploy-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Docker Compose
        run: |
          # Test docker-compose configuration
          docker-compose config

      - name: Test deployment with latest image
        run: |
          # Update docker-compose to use latest image
          export IMAGE_TAG=latest

          # Start services
          docker-compose up -d

          # Wait for services to be ready
          sleep 30

          # Comprehensive deployment tests
          echo "=== Testing Health Endpoint ==="
          curl -f http://localhost:8080/api/health

          echo "=== Testing Device Info ==="
          curl -f http://localhost:8080/api/device

          echo "=== Testing File Operations ==="
          # Create test file
          echo "deployment test content" > test_upload.txt

          # Test file listing
          curl -f http://localhost:8080/api/files

          echo "=== Testing Container Health ==="
          docker-compose ps

          echo "=== Testing Resource Usage ==="
          docker stats --no-stream

          echo "=== Checking Logs for Errors ==="
          docker-compose logs | grep -i error || echo "No errors found"

          # Cleanup
          docker-compose down -v
          rm -f test_upload.txt

  # Comprehensive Performance Regression Testing
  performance-regression:
    name: Performance Regression
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Enhanced performance regression tests
        run: |
          # Pull latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Create comprehensive test data
          mkdir -p perf_test

          # Small files
          for i in {1..100}; do
            echo "Small test file $i content" > perf_test/small_$i.txt
          done

          # Medium files
          for i in {1..10}; do
            head -c 1048576 /dev/urandom > perf_test/medium_$i.bin  # 1MB
          done

          # Large file
          head -c 10485760 /dev/urandom > perf_test/large.bin  # 10MB

          # Start container
          docker run -d --name perf-test -p 8080:8080 \
            -v $(pwd)/perf_test:/app/files \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          sleep 15

          # Install performance testing tools
          sudo apt-get install -y apache2-utils curl

          echo "=== Performance Baseline Tests ==="

          # Health check performance (should be < 50ms)
          echo "Health endpoint latency:"
          ab -n 100 -c 1 -q http://localhost:8080/api/health | grep "Time per request"

          # File listing performance (should be < 200ms for 111 files)
          echo "File listing latency:"
          ab -n 50 -c 1 -q http://localhost:8080/api/files | grep "Time per request"

          # Device info performance (should be < 100ms)
          echo "Device info latency:"
          ab -n 100 -c 1 -q http://localhost:8080/api/device | grep "Time per request"

          echo "=== Concurrent Performance Tests ==="

          # Test concurrent requests
          ab -n 1000 -c 10 http://localhost:8080/api/health
          ab -n 500 -c 5 http://localhost:8080/api/files
          ab -n 200 -c 3 http://localhost:8080/api/device

          echo "=== Memory and Resource Usage ==="
          docker stats --no-stream perf-test

          # Cleanup
          docker stop perf-test
          docker rm perf-test
          rm -rf perf_test

  # Security and Compliance Checks
  security-compliance:
    name: Security Compliance
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run CIS Docker Benchmark
        run: |
          # Pull and test latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Basic security checks
          echo "=== Container Security Audit ==="

          # Check if container runs as non-root
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest whoami | grep -v root || {
            echo "✅ Container runs as non-root user"
          }

          # Check for sensitive files
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest find / -name "*.key" -o -name "*.pem" -o -name "*.crt" 2>/dev/null || echo "✅ No sensitive files found"

          # Check filesystem permissions
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ls -la /app/

      - name: OWASP ZAP Security Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: "http://localhost:8080"
          docker_name: "owasp/zap2docker-stable"
          allow_issue_writing: false

  # Notification and Reporting
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs:
      [
        test,
        security,
        performance,
        mutation-testing,
        chaos-testing,
        coverage,
        docker,
        deploy-validation,
      ]
    if: always()
    steps:
      - name: Generate comprehensive report
        run: |
          echo "# 🚀 RustDrop CI/CD Pipeline Results" > pipeline-report.md
          echo "" >> pipeline-report.md
          echo "## 📊 Test Results Summary" >> pipeline-report.md
          echo "| Component | Status | Details |" >> pipeline-report.md
          echo "|-----------|--------|---------|" >> pipeline-report.md
          echo "| Unit & Integration Tests | ${{ needs.test.result }} | Core functionality validation |" >> pipeline-report.md
          echo "| Security Audit | ${{ needs.security.result }} | Vulnerability scanning |" >> pipeline-report.md
          echo "| Performance Tests | ${{ needs.performance.result }} | Load and stress testing |" >> pipeline-report.md
          echo "| Mutation Testing | ${{ needs.mutation-testing.result }} | Test quality validation |" >> pipeline-report.md
          echo "| Chaos Testing | ${{ needs.chaos-testing.result }} | Resilience under stress |" >> pipeline-report.md
          echo "| Code Coverage | ${{ needs.coverage.result }} | Test coverage analysis |" >> pipeline-report.md
          echo "| Docker Security | ${{ needs.docker.result }} | Container security scan |" >> pipeline-report.md
          echo "| Deployment Validation | ${{ needs.deploy-validation.result }} | Production readiness |" >> pipeline-report.md
          echo "" >> pipeline-report.md

          if [[ "${{ needs.test.result }}" == "failure" || \
                "${{ needs.security.result }}" == "failure" || \
                "${{ needs.docker.result }}" == "failure" ]]; then
            echo "## ❌ Pipeline Status: FAILED" >> pipeline-report.md
            echo "Critical components failed - deployment blocked" >> pipeline-report.md
            exit 1
          else
            echo "## ✅ Pipeline Status: SUCCESS" >> pipeline-report.md
            echo "All critical components passed - ready for deployment" >> pipeline-report.md
          fi

      - name: Upload pipeline report
        uses: actions/upload-artifact@v3
        with:
          name: pipeline-report
          path: pipeline-report.md
